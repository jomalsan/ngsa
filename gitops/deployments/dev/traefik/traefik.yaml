kind: ServiceAccount
apiVersion: v1
metadata:
  name: traefik-ingress-controller
  namespace: traefik
  labels:
    app.kubernetes.io/name: traefik-ingress-ilb
    app.kubernetes.io/instance: traefik-ingress-ilb
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-ingress-controller
rules:
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - traefik.containo.us
    resources:
      - middlewares
      - ingressroutes
      - traefikservices
      - ingressroutetcps
      - ingressrouteudps
      - tlsoptions
      - tlsstores
    verbs:
      - get
      - list
      - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-ingress-controller

roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-ingress-controller
subjects:
  - kind: ServiceAccount
    name: traefik-ingress-controller
    namespace: traefik
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik-ingress-config
  namespace: traefik
  labels:
    app.kubernetes.io/name: traefik-ingress-ilb
    app.kubernetes.io/instance: traefik-ingress-ilb
data:
  traefik.toml: |
    [metrics]
      [metrics.prometheus]
        entryPoint = "metrics"
        addEntryPointsLabels = true
        addServicesLabels = true
    [accessLog]
      filePath = "/data/access.log"
      bufferingSize = 100
    [global]
      # prevent Traefik from checking newer versions in production
      checknewversion = false
      # prevent Traefik from collecting and sending stats from production
      sendanonymoususage = false
    [log]
      level = "DEBUG"
      format = "json"
    [api]
      dashboard = true
    [providers]
      # Configuration reload frequency:
      #   * duration that Traefik waits for, after a configuration reload, before taking into account any new configuration refresh event
      #   * the most recent one is taken into account, and all the previous others are dropped.
      providersThrottleDuration = 10
      [providers.file]
        filename = "/config/traefik.toml"
        watch = true
      # Traefik provider that supports the native Kubernetes Ingress specification
      # and derives the corresponding dynamic configuration from it. https://kubernetes.io/docs/concepts/services-networking/ingress/
      # [providers.kubernetesingress]
      #   ingressClass = "traefik-internal"
      #   # namespaces = ["a0008"] # Commented out to watch all namespaces
      #   [providers.kubernetesIngress.ingressEndpoint]
      #     publishedService = "traefik/traefik-ingress-service"
      [providers.kubernetesCRD]
        ingressClass = "traefik-internal"
    # Enable gzip compression
    [http.middlewares]
      [http.middlewares.gzip-compress.compress]
      [http.middlewares.app-gateway-snet.ipWhiteList]
        sourceRange = ["10.100.80.0/22"]
    [entryPoints]
      [entryPoints.metrics]
        address = ":8082"
      [entryPoints.dashboard]
        address = ":8080"
      [entryPoints.traefik]
        address = ":9000"
      # [entryPoints.websecure]
      #   address = ":8443"
      #   [entryPoints.web.forwardedHeaders]
      #     trustedIPs = ["10.100.80.0/22"]
      #   [entryPoints.websecure.http.tls]
      #     options = "default"
    [ping]
      entryPoint = "traefik"
    # [tls]
    #   # without duplicating this cert config and with SNI enabled, Traefik won't
    #   # find the certificates for your host. It may be a Traefik's issue.
    #   [[tls.certificates]]
    #     certFile = "/certs/tls.crt"
    #     keyFile = "/certs/tls.key"
    #     stores = ["default"]
    #   [tls.stores]
    #     [tls.stores.default]
    #       [tls.stores.default.defaultCertificate]
    #         # without specifying in here your certs, Traefik will create its own
    #         # certificate
    #         certFile = "/certs/tls.crt"
    #         keyFile = "/certs/tls.key"
    #   [tls.options.default]
    #     minVersion = "VersionTLS12"
    #     sniStrict = true
---
apiVersion: v1
kind: Service
metadata:
  name: traefik-ingress-service
  namespace: traefik
  labels:
    app.kubernetes.io/name: traefik-ingress-ilb
    app.kubernetes.io/instance: traefik-ingress-ilb
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: traefik-ingress-ilb
    app.kubernetes.io/instance: traefik-ingress-ilb
  ports:
  - port: 443
    name: https
    targetPort: websecure
  - port: 8080
    name: dashboard
    targetPort: dashboard
  - port: 9000
    name: traefik
    targetPort: traefik
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traefik-ingress-controller
  namespace: traefik
  labels:
    app.kubernetes.io/name: traefik-ingress-ilb
    app.kubernetes.io/instance: traefik-ingress-ilb
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: traefik-ingress-ilb
      app.kubernetes.io/instance: traefik-ingress-ilb
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
      labels:
        app.kubernetes.io/name: traefik-ingress-ilb
        app.kubernetes.io/instance: traefik-ingress-ilb
        #aadpodidbinding: podmi-ingress-controller
    spec:
      hostNetwork: false
      serviceAccountName: traefik-ingress-controller
      terminationGracePeriodSeconds: 60
      containers:
      - image: docker.io/library/traefik:2.2.1
        name: traefik-ingress-controller
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
        readinessProbe:
          httpGet:
            path: /ping
            port: "traefik"
          failureThreshold: 1
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        livenessProbe:
          httpGet:
            path: /ping
            port: "traefik"
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        ports:
        - name: "traefik"
          containerPort: 9000
          protocol: TCP
        - name: "websecure"
          containerPort: 8443
          protocol: TCP
        - name: "metrics"
          containerPort: 8082
          protocol: TCP
        - name: "dashboard"
          containerPort: 8080
          protocol: TCP
        securityContext:
          capabilities:
            drop:
            - ALL
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        volumeMounts:
          - name: data
            mountPath: /data
          - name: config
            mountPath: /config
            readOnly: true
          # - name: ssl-csi
          #   mountPath: /certs
          #   readOnly: true
        args:
        - --configfile=/config/traefik.toml
      volumes:
        - name: config
          configMap:
            name: traefik-ingress-config
        # - name: ssl-csi
        #   csi:
        #     driver: secrets-store.csi.k8s.io
        #     readOnly: true
        #     volumeAttributes:
        #       secretProviderClass: aks-ingress-contoso-com-tls-secret-csi-akv
        - name: data
          emptyDir: {}
      # nodeSelector:
      #  agentpool: npuser01
